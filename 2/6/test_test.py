# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import test as module_0


# @pytest.mark.xfail(strict=True)
def test_case_0(): # FAILED - AttributeError: 'Solution' object has no attribute 'left'
    solution_0 = module_0.Solution()
    float_0 = -886.4784
    tree_node_0 = module_0.TreeNode(float_0)
    none_type_0 = None
    int_0 = solution_0.getMinimumDifference(none_type_0)
    assert int_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tree_node_1 = module_0.TreeNode()
    assert tree_node_1.val == 0
    solution_0.getMinimumDifference(solution_0)


# @pytest.mark.xfail(strict=True)
def test_case_1(): # FAILED - TypeError: test.Solution() argument after * must be an iterable, not int
    int_0 = 795
    module_0.Solution(*int_0)


# @pytest.mark.xfail(strict=True)
def test_case_2(): # FAILED - TypeError: Solution() takes no arguments
    solution_0 = module_0.Solution()
    tree_node_0 = module_0.TreeNode(solution_0, solution_0)
    str_0 = "Pf"
    tree_node_1 = module_0.TreeNode(str_0)
    solution_1 = module_0.Solution()
    list_0 = [tree_node_1, tree_node_0, str_0]
    module_0.Solution(*list_0)


def test_case_3(): # PASSED
    solution_0 = module_0.Solution()
    float_0 = -886.4784
    tree_node_0 = module_0.TreeNode(float_0)
    none_type_0 = None
    int_0 = solution_0.getMinimumDifference(none_type_0)
    assert int_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tree_node_1 = module_0.TreeNode()
    assert tree_node_1.val == 0
    bool_0 = False
    tree_node_2 = module_0.TreeNode(left=none_type_0, right=bool_0)
    assert tree_node_2.val == 0
    int_1 = solution_0.getMinimumDifference(tree_node_1)
    assert int_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


# @pytest.mark.xfail(strict=True)
def test_case_4(): # FAILED - TypeError: unsupported operand type(s) for -: 'TreeNode' and 'int'
    solution_0 = module_0.Solution()
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    tree_node_1 = module_0.TreeNode(tree_node_0)
    tree_node_2 = module_0.TreeNode(right=tree_node_1)
    assert tree_node_2.val == 0
    solution_0.getMinimumDifference(tree_node_2)
