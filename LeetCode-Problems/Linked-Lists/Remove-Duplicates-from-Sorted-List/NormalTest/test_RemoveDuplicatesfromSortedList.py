# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import RemoveDuplicatesfromSortedList as module_0


def test_case_0():#PASSED
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_2 = module_0.deleteDuplicates(list_node_1)
    assert (
        f"{type(list_node_2).__module__}.{type(list_node_2).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert (
        f"{type(list_node_2.val).__module__}.{type(list_node_2.val).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert (
        f"{type(list_node_2.next).__module__}.{type(list_node_2.next).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )


def test_case_1():#PASSED
    none_type_0 = None
    list_node_0 = module_0.deleteDuplicates(none_type_0)
    list_node_1 = module_0.deleteDuplicates(list_node_0)
    list_node_2 = module_0.ListNode()
    assert list_node_2.val == 0


def test_case_2():#PASSED
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_2 = module_0.deleteDuplicates(list_node_1)
    assert (
        f"{type(list_node_2).__module__}.{type(list_node_2).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert (
        f"{type(list_node_2.val).__module__}.{type(list_node_2.val).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert (
        f"{type(list_node_2.next).__module__}.{type(list_node_2.next).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    list_node_3 = module_0.deleteDuplicates(list_node_0)
    assert (
        f"{type(list_node_3).__module__}.{type(list_node_3).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert list_node_3.val == 0
    assert list_node_3.next is None


def test_case_3():#PASSED
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(next=list_node_0)
    assert list_node_1.val == 0
    list_node_2 = module_0.deleteDuplicates(list_node_1)
    assert list_node_1.next is None
    assert (
        f"{type(list_node_2).__module__}.{type(list_node_2).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert list_node_2.val == 0
    assert list_node_2.next is None


def test_case_4():#PASSED
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_2 = module_0.ListNode(next=list_node_1)
    assert list_node_2.val == 0
    list_node_3 = module_0.deleteDuplicates(list_node_2)
    assert (
        f"{type(list_node_3).__module__}.{type(list_node_3).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    assert list_node_3.val == 0
    assert (
        f"{type(list_node_3.next).__module__}.{type(list_node_3.next).__qualname__}"
        == "RemoveDuplicatesfromSortedList.ListNode"
    )
    list_node_4 = module_0.ListNode(next=list_node_2)
    assert list_node_4.val == 0
