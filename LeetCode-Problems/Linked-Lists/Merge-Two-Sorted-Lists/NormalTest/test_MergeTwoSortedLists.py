# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import MergeTwoSortedLists as module_0


def test_case_0():#PASSED
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    none_type_0 = None
    var_0 = module_0.mergeTwoLists(list_node_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert var_0.val == 0
    assert var_0.next is None
    list_node_1 = module_0.ListNode()
    assert list_node_1.val == 0
    var_1 = module_0.mergeTwoLists(list_node_1, list_node_0)
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert var_1.val == 0
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )


def test_case_1():#PASSED
    none_type_0 = None
    var_0 = module_0.mergeTwoLists(none_type_0, none_type_0)
    float_0 = -2455.56007
    list_node_0 = module_0.ListNode(float_0)
    var_1 = module_0.mergeTwoLists(none_type_0, float_0)
    assert var_1 == pytest.approx(-2455.56007, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_2():#FAILED: 'str' object has no attribute 'val'
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    var_0 = module_0.mergeTwoLists(list_0, none_type_0)
    list_node_0 = module_0.ListNode(none_type_0)
    str_0 = "COw{J_1ZCX[Thzr|"
    list_node_1 = module_0.ListNode(next=str_0)
    assert list_node_1.val == 0
    module_0.mergeTwoLists(list_node_1, list_node_1)


#@pytest.mark.xfail(strict=True)
def test_case_3():#FAILED: 'dict' object has no attribute 'val'
    int_0 = 909
    list_node_0 = module_0.ListNode(int_0)
    var_0 = module_0.mergeTwoLists(list_node_0, list_node_0)
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert var_0.val == 909
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    none_type_0 = None
    list_node_1 = module_0.ListNode(next=none_type_0)
    assert list_node_1.val == 0
    var_1 = module_0.mergeTwoLists(none_type_0, none_type_0)
    var_2 = module_0.mergeTwoLists(list_node_0, none_type_0)
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    var_3 = module_0.mergeTwoLists(list_node_1, none_type_0)
    assert var_3.val == 0
    none_type_1 = None
    list_node_2 = module_0.ListNode(list_node_1)
    var_4 = module_0.mergeTwoLists(none_type_1, none_type_1)
    list_node_3 = module_0.ListNode(var_2)
    var_5 = module_0.mergeTwoLists(var_3, none_type_1)
    assert var_5.val == 0
    var_6 = module_0.mergeTwoLists(none_type_0, none_type_0)
    list_node_4 = module_0.ListNode()
    assert list_node_4.val == 0
    var_7 = module_0.mergeTwoLists(var_3, var_2)
    assert (
        f"{type(list_node_1.next).__module__}.{type(list_node_1.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert (
        f"{type(var_3.next).__module__}.{type(var_3.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert (
        f"{type(var_5.next).__module__}.{type(var_5.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    assert var_7.val == 0
    assert (
        f"{type(var_7.next).__module__}.{type(var_7.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    var_8 = module_0.mergeTwoLists(none_type_0, list_node_0)
    assert (
        f"{type(var_8.next).__module__}.{type(var_8.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    var_9 = module_0.mergeTwoLists(var_5, var_6)
    assert var_9.val == 0
    assert (
        f"{type(var_9.next).__module__}.{type(var_9.next).__qualname__}"
        == "MergeTwoSortedLists.ListNode"
    )
    list_node_5 = module_0.ListNode(next=var_9)
    assert list_node_5.val == 0
    list_node_6 = module_0.ListNode(var_4)
    dict_0 = {list_node_0: var_9, var_7: none_type_0, list_node_5: list_node_1}
    module_0.mergeTwoLists(var_2, dict_0)
