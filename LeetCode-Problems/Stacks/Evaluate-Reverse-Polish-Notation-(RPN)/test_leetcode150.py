# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import leetcode150 as module_0


#@pytest.mark.xfail(strict=True)
def test_case_0(): # FAILED test_leetcode150.py::test_case_0 - ValueError: invalid literal for int() with base 10: 'z'
    solution_0 = module_0.Solution()
    str_0 = "zYE_/?.>1O77 ^y4DJJ"
    solution_0.evalRPN(str_0)


#@pytest.mark.xfail(strict=True)
def test_case_1(): # FAILED test_leetcode150.py::test_case_1 - IndexError: list index out of range
    solution_0 = module_0.Solution()
    list_0 = []
    solution_1 = module_0.Solution()
    solution_0.evalRPN(list_0)


#@pytest.mark.xfail(strict=True)
def test_case_2(): # FAILED test_leetcode150.py::test_case_2 - TypeError: leetcode150.Solution() argument after ** must be a mapping, not float
    float_0 = 2976.99
    module_0.Solution(**float_0)


#@pytest.mark.xfail(strict=True)
def test_case_3(): # FAILED test_leetcode150.py::test_case_3 - IndexError: pop from empty list
    solution_0 = module_0.Solution()
    str_0 = '/5\\.E"D#z%'
    solution_0.evalRPN(str_0)


#@pytest.mark.xfail(strict=True)
def test_case_4(): # FAILED test_leetcode150.py::test_case_4 - ValueError: invalid literal for int() with base 10: ';'
    solution_0 = module_0.Solution()
    str_0 = "62-;DR7G$PB\\"
    solution_0.evalRPN(str_0)


#@pytest.mark.xfail(strict=True)
def test_case_5(): # FAILED test_leetcode150.py::test_case_5 - ValueError: invalid literal for int() with base 10: 'n'
    solution_0 = module_0.Solution()
    str_0 = "61/2nl-;R7#.G$PB\\"
    solution_0.evalRPN(str_0)


#@pytest.mark.xfail(strict=True)
def test_case_6(): # FAILED test_leetcode150.py::test_case_6 - IndexError: pop from empty list
    solution_0 = module_0.Solution()
    str_0 = "09/2*-;DY`UsO(SGK[?\\"
    solution_0.evalRPN(str_0)


#@pytest.mark.xfail(strict=True)
def test_case_7(): # FAILED test_leetcode150.py::test_case_7 - ValueError: invalid literal for int() with base 10: 'C'
    solution_0 = module_0.Solution()
    str_0 = "09/2+C-;o`(SGK[?\\U"
    solution_0.evalRPN(str_0)
