# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import leetcode155 as module_0


#@pytest.mark.xfail(strict=True)
def test_case_0(): # FAILED test_leetcode155.py::test_case_0 - TypeError: '<' not supported between instances of 'MinStack' and 'int'
    int_0 = 565
    min_stack_0 = module_0.MinStack()
    none_type_0 = min_stack_0.push(min_stack_0)
    assert len(min_stack_0.min_stk) == 1
    min_stack_0.push(int_0)


def test_case_1(): #PASSED
    int_0 = -3898
    min_stack_0 = module_0.MinStack()
    none_type_0 = min_stack_0.push(int_0)
    assert min_stack_0.min_stk == [-3898]


def test_case_2(): #PASSED
    min_stack_0 = module_0.MinStack()


#@pytest.mark.xfail(strict=True)
def test_case_3(): # FAILED test_leetcode155.py::test_case_3 - IndexError: pop from empty list
    min_stack_0 = module_0.MinStack()
    min_stack_0.pop()


#@pytest.mark.xfail(strict=True)
def test_case_4(): # FAILED test_leetcode155.py::test_case_4 - IndexError: list index out of range
    min_stack_0 = module_0.MinStack()
    min_stack_0.top()


#@pytest.mark.xfail(strict=True)
def test_case_5(): # FAILED test_leetcode155.py::test_case_5 - IndexError: list index out of range
    min_stack_0 = module_0.MinStack()
    min_stack_0.getMin()


#@pytest.mark.xfail(strict=True)
def test_case_6(): # FAILED test_leetcode155.py::test_case_6 - IndexError: list index out of range
    bool_0 = True
    min_stack_0 = module_0.MinStack()
    none_type_0 = min_stack_0.push(bool_0)
    assert min_stack_0.min_stk == [True]
    none_type_1 = min_stack_0.push(bool_0)
    assert min_stack_0.min_stk == [True, True]
    min_stack_1 = module_0.MinStack()
    min_stack_1.top()


#@pytest.mark.xfail(strict=True)
def test_case_7(): # FAILED test_leetcode155.py::test_case_7 - IndexError: list index out of range
    bool_0 = True
    min_stack_0 = module_0.MinStack()
    none_type_0 = min_stack_0.push(bool_0)
    assert min_stack_0.min_stk == [True]
    int_0 = min_stack_0.top()
    assert int_0 is True
    int_1 = 1705
    none_type_1 = min_stack_0.push(int_1)
    assert min_stack_0.min_stk == [True, True]
    int_2 = min_stack_0.getMin()
    assert int_2 is True
    none_type_2 = min_stack_0.push(int_0)
    assert min_stack_0.min_stk == [True, True, True]
    none_type_3 = min_stack_0.pop()
    assert min_stack_0.min_stk == [True, True]
    min_stack_1 = module_0.MinStack()
    min_stack_1.top()
