# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cod as module_0

#https://github.com/gahogg/Leetcode-Solutions/blob/main/Merge%20k%20Sorted%20(Linked)%20Lists%20-%20Leetcode%2023/Merge%20k%20Sorted%20(Linked)%20Lists%20-%20Leetcode%2023.py
# @pytest.mark.xfail(strict=True)
def test_case_0():#FAILED test_cod.py::test_case_0 - AttributeError: 'bytes' object has no attribute 'val'
    bytes_0 = b"\xaa\x83\xbfK"
    set_0 = {bytes_0}
    module_0.mergeKLists(set_0)


# @pytest.mark.xfail(strict=True)
def test_case_1():#FAILED test_cod.py::test_case_1 - TypeError: 'NoneType' object is not iterable
    list_0 = []
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    var_0 = module_0.mergeKLists(list_0)
    module_0.mergeKLists(var_0)


def test_case_2():#PASSED
    bool_0 = False
    list_node_0 = module_0.ListNode(next=bool_0)
    assert list_node_0.val == 0
    list_0 = [list_node_0]
    var_0 = module_0.mergeKLists(list_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "cod.ListNode"
    assert var_0.val == 0
    assert var_0.next is False


# @pytest.mark.xfail(strict=True)
def test_case_3():#FAILED test_cod.py::test_case_3 - TypeError: 'NoneType' object is not iterable
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    var_0 = module_0.mergeKLists(set_0)
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)
    module_0.mergeKLists(none_type_0)


# @pytest.mark.xfail(strict=True)
def test_case_4():#FAILED test_cod.py::test_case_4 - AttributeError: 'int' object has no attribute 'val'
    int_0 = 800
    list_node_0 = module_0.ListNode(next=int_0)
    assert list_node_0.val == 0
    list_0 = [list_node_0, list_node_0]
    module_0.mergeKLists(list_0)


# @pytest.mark.xfail(strict=True)
def test_case_5():#FAILED test_cod.py::test_case_5 - AttributeError: 'tuple' object has no attribute 'val'
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)
    list_0 = [list_node_0, none_type_0]
    var_0 = module_0.mergeKLists(list_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "cod.ListNode"
    assert var_0.val is None
    assert var_0.next is None
    list_1 = [none_type_0, none_type_0, none_type_0, none_type_0]
    list_node_1 = module_0.ListNode()
    assert list_node_1.val == 0
    list_node_2 = module_0.ListNode(list_1)
    list_node_3 = module_0.ListNode(next=list_node_1)
    assert list_node_3.val == 0
    bool_0 = False
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1)
    list_node_4 = module_0.ListNode(next=tuple_0)
    assert list_node_4.val == 0
    set_0 = {list_node_3, none_type_0, list_node_4}
    list_node_5 = module_0.ListNode(list_node_0)
    list_node_6 = module_0.ListNode(set_0, list_node_5)
    list_2 = [list_node_3, list_node_4]
    module_0.mergeKLists(list_2)
