# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cod as module_0
#https://github.com/gahogg/Leetcode-Solutions/blob/main/K%20Closest%20Points%20to%20Origin%20-%20Leetcode%20973/K%20Closest%20Points%20to%20Origin%20-%20Leetcode%20973.py

# @pytest.mark.xfail(strict=True)
def test_case_0():#FAILED test_cod.py::test_case_0 - ValueError: too many values to unpack (expected 2)
    bool_0 = False
    int_0 = 3194
    list_0 = [bool_0, bool_0, int_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.kClosest(list_1, list_0)


# @pytest.mark.xfail(strict=True)
def test_case_1():#FAILED test_cod.py::test_case_0 - ValueError: too many values to unpack (expected 2)
    tuple_0 = ()
    bool_0 = False
    list_0 = module_0.kClosest(tuple_0, bool_0)
    list_1 = module_0.kClosest(list_0, bool_0)
    none_type_0 = None
    list_2 = module_0.kClosest(list_1, none_type_0)
    none_type_1 = None
    module_0.kClosest(none_type_1, tuple_0)


# @pytest.mark.xfail(strict=True)
def test_case_2():#FAILED test_cod.py::test_case_2 - ValueError: too many values to unpack (expected 2)
    int_0 = 2221
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0]
    list_2 = module_0.kClosest(list_1, int_0)
    list_3 = module_0.kClosest(list_1, int_0)
    bool_0 = False
    bool_1 = False
    int_1 = 4310
    list_4 = [bool_0, int_1, bool_0, int_1]
    list_5 = [list_4]
    module_0.kClosest(list_5, bool_1)


# @pytest.mark.xfail(strict=True)
def test_case_3():#FAILED test_cod.py::test_case_3 - TypeError: 'bool' object is not iterable
    bool_0 = False
    module_0.kClosest(bool_0, bool_0)


# @pytest.mark.xfail(strict=True)
def test_case_4():#FAILED test_cod.py::test_case_4 - ValueError: too many values to unpack (expected 2)
    int_0 = -332
    bool_0 = True
    list_0 = [int_0, bool_0]
    bool_1 = False
    list_1 = [bool_1, bool_0, bool_0]
    list_2 = [list_0, list_0, list_0, list_1]
    module_0.kClosest(list_2, int_0)
