# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import test as module_0


# @pytest.mark.xfail(strict=True)
def test_case_0(): # FAILED - AttributeError: 'Solution' object has no attribute 'left'
    solution_0 = module_0.Solution()
    tree_node_0 = module_0.TreeNode(left=solution_0)
    assert tree_node_0.val == 0
    solution_0.isBalanced(tree_node_0)


def test_case_1(): # PASSED
    none_type_0 = None
    solution_0 = module_0.Solution()
    bool_0 = solution_0.isBalanced(none_type_0)
    assert bool_0 is True


def test_case_2(): # PASSED
    int_0 = -867
    tree_node_0 = module_0.TreeNode(left=int_0)
    assert tree_node_0.val == 0


# @pytest.mark.xfail(strict=True)
def test_case_3(): # FAILED - AttributeError: 'float' object has no attribute 'left'
    float_0 = 892.0
    tree_node_0 = module_0.TreeNode(right=float_0)
    assert tree_node_0.val == 0
    solution_0 = module_0.Solution()
    solution_0.isBalanced(tree_node_0)


def test_case_4(): # PASSED
    solution_0 = module_0.Solution()
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    bool_0 = solution_0.isBalanced(tree_node_0)
    assert bool_0 is True
    tree_node_1 = module_0.TreeNode(tree_node_0)


def test_case_5(): # PASSED
    solution_0 = module_0.Solution()
    solution_1 = module_0.Solution()
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    bool_0 = solution_1.isBalanced(tree_node_0)
    assert bool_0 is True
    none_type_0 = None
    bool_1 = solution_1.isBalanced(none_type_0)
    assert bool_1 is True
    none_type_1 = None
    bool_2 = solution_1.isBalanced(none_type_1)
    bool_3 = solution_1.isBalanced(none_type_0)
    tree_node_1 = module_0.TreeNode(bool_0)
    assert tree_node_1.val is True
    tree_node_2 = module_0.TreeNode(right=tree_node_1)
    assert tree_node_2.val == 0
    tree_node_3 = module_0.TreeNode(left=tree_node_1)
    assert tree_node_3.val == 0
    tree_node_4 = module_0.TreeNode(left=tree_node_3)
    assert tree_node_4.val == 0
    solution_2 = module_0.Solution()
    bool_4 = solution_0.isBalanced(tree_node_4)
    assert bool_4 is False
    bool_5 = solution_2.isBalanced(tree_node_2)
    assert bool_5 is True


def test_case_6(): # PASSED
    solution_0 = module_0.Solution()
    solution_1 = module_0.Solution()
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    bool_0 = solution_1.isBalanced(tree_node_0)
    assert bool_0 is True
    none_type_0 = None
    bool_1 = solution_1.isBalanced(none_type_0)
    assert bool_1 is True
    none_type_1 = None
    bool_2 = solution_1.isBalanced(none_type_1)
    bool_3 = solution_1.isBalanced(none_type_0)
    tree_node_1 = module_0.TreeNode(bool_0)
    assert tree_node_1.val is True
    tree_node_2 = module_0.TreeNode(right=tree_node_1)
    assert tree_node_2.val == 0
    tree_node_3 = module_0.TreeNode(left=tree_node_2)
    assert tree_node_3.val == 0
    tree_node_4 = module_0.TreeNode(left=tree_node_3)
    assert tree_node_4.val == 0
    solution_2 = module_0.Solution()
    bool_4 = solution_0.isBalanced(tree_node_4)
    assert bool_4 is False
    bool_5 = solution_2.isBalanced(tree_node_2)
    assert bool_5 is True
