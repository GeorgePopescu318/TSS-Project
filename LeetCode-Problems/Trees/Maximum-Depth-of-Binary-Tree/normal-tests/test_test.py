# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import test as module_0


def test_case_0(): # PASSED
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    solution_0 = module_0.Solution()
    var_0 = solution_0.maxDepth(tree_node_0)
    assert var_0 == 1
    tree_node_1 = module_0.TreeNode(left=var_0)
    assert tree_node_1.val == 0
    assert tree_node_1.left == 1
    tree_node_2 = module_0.TreeNode()
    assert tree_node_2.val == 0


# @pytest.mark.xfail(strict=True)
def test_case_1(): # FAILED - TypeError: Solution() takes no arguments
    bool_0 = False
    solution_0 = module_0.Solution()
    var_0 = solution_0.maxDepth(bool_0)
    assert var_0 == 0
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    set_0 = {tree_node_0}
    module_0.Solution(*set_0)


def test_case_2(): # PASSED
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    tree_node_1 = module_0.TreeNode()
    assert tree_node_1.val == 0


# @pytest.mark.xfail(strict=True)
def test_case_3(): # FAILED - AttributeError: 'float' object has no attribute 'left'
    complex_0 = -2119.34 - 710.208j
    solution_0 = module_0.Solution()
    var_0 = module_0.TreeNode(right=complex_0)
    assert var_0.val == 0
    tuple_0 = ()
    solution_1 = module_0.Solution()
    solution_2 = module_0.Solution()
    tree_node_0 = module_0.TreeNode(right=tuple_0)
    assert tree_node_0.val == 0
    float_0 = -871.0
    tree_node_1 = module_0.TreeNode(left=float_0)
    assert tree_node_1.val == 0
    solution_3 = module_0.Solution()
    solution_3.maxDepth(tree_node_1)


# @pytest.mark.xfail(strict=True)
def test_case_4(): # FAILED - AttributeError: 'int' object has no attribute 'left'
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    none_type_0 = None
    solution_0 = module_0.Solution()
    int_0 = 4996
    tree_node_1 = module_0.TreeNode(left=none_type_0, right=int_0)
    assert tree_node_1.val == 0
    solution_0.maxDepth(tree_node_1)
