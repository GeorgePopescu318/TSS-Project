# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import test as module_0


# @pytest.mark.xfail(strict=True)
def test_case_0(): # FAILED - AttributeError: 'Solution' object has no attribute 'val'
    solution_0 = module_0.Solution()
    solution_0.isSubtree(solution_0, solution_0)


# @pytest.mark.xfail(strict=True)
def test_case_1(): # FAILED - AttributeError: 'str' object has no attribute 'val'
    str_0 = "="
    tree_node_0 = module_0.TreeNode(right=str_0)
    assert tree_node_0.val == 0
    solution_0 = module_0.Solution()
    solution_0.isSubtree(tree_node_0, tree_node_0)


def test_case_2(): # PASSED
    list_0 = []
    solution_0 = module_0.Solution(*list_0)
    tree_node_0 = module_0.TreeNode(solution_0)
    bool_0 = solution_0.isSubtree(tree_node_0, list_0)
    assert bool_0 is False


def test_case_3(): # PASSED
    list_0 = []
    solution_0 = module_0.Solution(*list_0)


# @pytest.mark.xfail(strict=True)
def test_case_4(): # FAILED - TypeError: Solution() takes no arguments
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    set_0 = set()
    solution_0 = module_0.Solution(*set_0)
    bool_0 = solution_0.isSubtree(tree_node_0, tree_node_0)
    assert bool_0 is True
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_0.Solution(*list_0, **dict_0)


# @pytest.mark.xfail(strict=True)
def test_case_5(): # FAILED - AttributeError: 'Solution' object has no attribute 'left'
    list_0 = []
    solution_0 = module_0.Solution(*list_0)
    none_type_0 = None
    solution_0.isSubtree(solution_0, none_type_0)


# @pytest.mark.xfail(strict=True)
def test_case_6(): # FAILED - AttributeError: 'Solution' object has no attribute 'val'
    str_0 = "As$g@jO=g50C*u2"
    tree_node_0 = module_0.TreeNode(str_0)
    tree_node_1 = module_0.TreeNode(left=tree_node_0)
    assert tree_node_1.val == 0
    solution_0 = module_0.Solution()
    bool_0 = solution_0.isSubtree(tree_node_1, tree_node_0)
    assert bool_0 is True
    solution_1 = module_0.Solution()
    solution_1.isSubtree(solution_1, solution_1)


def test_case_7(): # PASSED
    str_0 = "_a;_B(5[Q"
    str_1 = "o!Lg2!*"
    tree_node_0 = module_0.TreeNode(str_1)
    solution_0 = module_0.Solution()
    bool_0 = solution_0.isSubtree(tree_node_0, tree_node_0)
    assert bool_0 is True
    solution_1 = module_0.Solution()
    tree_node_1 = module_0.TreeNode(str_1, right=str_1)
    bool_1 = solution_1.isSubtree(tree_node_0, tree_node_1)
    assert bool_1 is False
    solution_2 = module_0.Solution()
    tree_node_2 = module_0.TreeNode()
    assert tree_node_2.val == 0
    tree_node_3 = module_0.TreeNode(right=solution_2)
    assert tree_node_3.val == 0
    bool_2 = solution_1.isSubtree(tree_node_2, bool_1)
    assert bool_2 is False
    solution_3 = module_0.Solution()
    tree_node_4 = module_0.TreeNode(str_0)
    tree_node_5 = module_0.TreeNode(left=tree_node_0)
    assert tree_node_5.val == 0


# @pytest.mark.xfail(strict=True)
def test_case_8(): # FAILED - AttributeError: 'float' object has no attribute 'val'
    float_0 = -1242.05
    tree_node_0 = module_0.TreeNode(left=float_0)
    assert tree_node_0.val == 0
    tree_node_1 = module_0.TreeNode(right=float_0)
    assert tree_node_1.val == 0
    solution_0 = module_0.Solution()
    solution_0.isSubtree(tree_node_0, tree_node_1)
