# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import test as module_0


def test_case_0(): # PASSED
    trie_0 = module_0.Trie()
    str_0 = "1\nY><'6>"
    trie_1 = module_0.Trie()
    none_type_0 = trie_1.insert(str_0)
    assert len(trie_1.trie) == 1


def test_case_1(): # PASSED
    str_0 = "6){SWx"
    trie_0 = module_0.Trie()
    bool_0 = trie_0.search(str_0)
    assert bool_0 is False
    trie_1 = module_0.Trie()
    none_type_0 = trie_1.insert(str_0)
    assert len(trie_1.trie) == 1


# @pytest.mark.xfail(strict=True)
def test_case_2(): # FAILED - TypeError: 'Trie' object is not iterable
    set_0 = set()
    trie_0 = module_0.Trie()
    bool_0 = trie_0.search(set_0)
    assert bool_0 is False
    str_0 = 'RErpMr"`+d('
    bool_1 = trie_0.search(str_0)
    assert bool_1 is False
    trie_1 = module_0.Trie()
    trie_1.startsWith(trie_1)


# @pytest.mark.xfail(strict=True)
def test_case_3(): # FAILED - TypeError: 'int' object is not iterable
    str_0 = "8?u\x0b!ibJoz"
    trie_0 = module_0.Trie()
    bool_0 = trie_0.startsWith(str_0)
    assert bool_0 is False
    int_0 = -2536
    trie_1 = module_0.Trie()
    trie_1.startsWith(int_0)


# @pytest.mark.xfail(strict=True)
def test_case_4(): # FAILED - TypeError: 'int' object is not iterable
    trie_0 = module_0.Trie()
    str_0 = "jd_I<"
    bool_0 = trie_0.search(str_0)
    assert bool_0 is False
    int_0 = 490
    str_1 = "F>)Yd8.lV"
    none_type_0 = trie_0.insert(str_1)
    assert len(trie_0.trie) == 1
    bool_1 = trie_0.startsWith(str_1)
    assert bool_1 is True
    trie_1 = module_0.Trie()
    trie_1.startsWith(int_0)


def test_case_5(): # PASSED
    trie_0 = module_0.Trie()


# @pytest.mark.xfail(strict=True)
def test_case_6(): # FAILED - TypeError: 'NoneType' object is not iterable
    str_0 = 'UyS(&\n5i6f+"<{'
    trie_0 = module_0.Trie()
    bool_0 = trie_0.search(str_0)
    assert bool_0 is False
    bool_1 = trie_0.startsWith(str_0)
    assert bool_1 is False
    none_type_0 = trie_0.insert(str_0)
    assert len(trie_0.trie) == 1
    bool_2 = trie_0.search(str_0)
    assert bool_2 is True
    trie_1 = module_0.Trie()
    none_type_1 = trie_1.insert(str_0)
    none_type_2 = trie_1.insert(str_0)
    trie_1.search(none_type_2)


# @pytest.mark.xfail(strict=True)
def test_case_7(): # FAILED - TypeError: 'int' object is not iterable
    str_0 = "jc~("
    trie_0 = module_0.Trie()
    none_type_0 = trie_0.insert(str_0)
    assert len(trie_0.trie) == 1
    bool_0 = trie_0.search(str_0)
    assert bool_0 is True
    trie_1 = module_0.Trie()
    trie_2 = module_0.Trie()
    bool_1 = trie_2.search(str_0)
    assert bool_1 is False
    trie_3 = module_0.Trie()
    str_1 = "i =\rD\x0bT0Y\\Kv\r-W"
    bool_2 = trie_1.startsWith(str_1)
    assert bool_2 is False
    trie_4 = module_0.Trie()
    trie_5 = module_0.Trie()
    trie_5.startsWith(trie_4)
