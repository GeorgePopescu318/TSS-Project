# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import BinarySearch as module_0


#@pytest.mark.xfail(strict=True)
def test_case_0():#FAILED: '>' not supported between instances of 'str' and 'int'
    str_0 = "Xb"
    int_0 = -1736
    module_0.search(str_0, int_0)


def test_case_1():#PASSED
    list_0 = []
    int_0 = 1158
    int_1 = module_0.search(list_0, int_0)
    assert int_1 == -1


def test_case_2():#PASSED
    bool_0 = True
    bool_1 = True
    bool_2 = True
    list_0 = [bool_0, bool_1, bool_2]
    int_0 = module_0.search(list_0, bool_0)
    assert int_0 == 1


def test_case_3():#PASSED
    tuple_0 = ()
    int_0 = 2259
    int_1 = module_0.search(tuple_0, int_0)
    assert int_1 == -1
    int_2 = -5610
    bool_0 = True
    list_0 = [int_2, bool_0, int_2]
    int_3 = module_0.search(list_0, int_2)
    assert int_3 == 0


#@pytest.mark.xfail(strict=True)
def test_case_4():#FAILED: object of type 'bool' has no len()
    bool_0 = False
    int_0 = -3169
    int_1 = -407
    bool_1 = False
    bool_2 = False
    list_0 = [int_0, int_1, bool_1, bool_2]
    int_2 = module_0.search(list_0, bool_1)
    assert int_2 == 2
    list_1 = [bool_0, bool_0]
    bool_3 = True
    int_3 = module_0.search(list_1, bool_3)
    assert int_3 == -1
    module_0.search(bool_0, list_1)