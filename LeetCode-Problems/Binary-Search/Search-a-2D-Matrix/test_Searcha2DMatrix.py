# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Searcha2DMatrix as module_0


#@pytest.mark.xfail(strict=True)
def test_case_0():#FAILED: KeyError: 0
    int_0 = 4235
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0]
    int_1 = 2490
    bool_0 = module_0.searchMatrix(list_1, int_1)
    assert bool_0 is False
    module_0.searchMatrix(dict_0, int_0)


def test_case_1():#PASSED
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    int_0 = 283
    bool_0 = module_0.searchMatrix(list_1, int_0)
    assert bool_0 is False
    bool_1 = module_0.searchMatrix(list_1, int_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():#FAILED: object of type 'int' has no len()
    int_0 = 2265
    module_0.searchMatrix(int_0, int_0)


def test_case_3():#PASSED
    int_0 = -1398
    bool_0 = True
    int_1 = 869
    list_0 = [bool_0, int_1]
    list_1 = [list_0, list_0, list_0, list_0]
    bool_1 = module_0.searchMatrix(list_1, int_0)
    assert bool_1 is False
    list_2 = [int_0]
    list_3 = [list_2, list_2]
    bool_2 = module_0.searchMatrix(list_3, int_0)
    assert bool_2 is True


#@pytest.mark.xfail(strict=True)
def test_case_4():#FAILED: object of type 'bool' has no len()
    bool_0 = False
    int_0 = -1920
    list_0 = [bool_0, int_0, int_0]
    list_1 = [list_0, list_0, list_0]
    int_1 = 1810
    bool_1 = module_0.searchMatrix(list_1, int_1)
    assert bool_1 is False
    int_2 = -2258
    module_0.searchMatrix(bool_0, int_2)
